{
  "pages": [
    {
      "text": "In my previous post I explained one way to get puppet running on CentOS 4 / RedHat ES-4 using a kickstart. Building from that kickstart, I am going to show how to set up a VirtualBox VM suitable for use with Vagrant. Although I focus on a dated distribution here, these instructions can be applied to other distributions pretty easily. The kickstart can only be used by distributions that support kickstart installations. That means any RedHat or CentOS and possibly others with modifications.\nIf you don't know why you might want to use Vagrant I will briefly explain. Vagrant is a tool that combines virtualization via VirtualBox with configuration management via Puppet and/or Chef to let you create reproducible development environments. You write a Vagrantfile that tells vagrant what your machine should look like and what puppet/chef configurations to apply. This means you don't need to keep a lot of VM's around when they aren't being used. Instead you can re-create the machine with vagrant when you need it, and destroy it when you're done. It has some nice features such as automatic ssh forwarding, optional port forwarding of other services (http for example), and automatic folder sharing. This last one is really nice, as it lets you write an application on your PC with whatever tools you would normally use and automatically have the code available in a VM for testing.\nIn this kickstart I don't provide Chef, although it can be added with gem install chef --no-doc --no-ri if you would like it to be included in your images.\nThe set up\nFor this to work you are going to need the following things on your PC. I will not go into the details of installing VirtualBox or Vagrant, they both have excellent documentation available.\nVirtualBox\nVagrant\nA terminal\nA CentOS / RedHat 4 DVD iso\nA web server, I use Python 2.7 and python -m 'http.server'\nWhen VirtualBox is installed, copy (or link), the VBoxGuestAdditions.iso file into a directory to work in. For linux hosts you can usually find it in /usr/lib/virtualbox/additions, for Mac OS hosts it will be in /Applications/VirtualBox.app/MacOS/. Grab a copy of the latest kickstart from github. Serve these files via http using your favourite web server. I\nuse Python and it's http.server module for Python 2.7 or SimpleHTTPServer for versions < 2.7.\nareid $ cd ~/kickstarts/puppet\npuppet $ ln -s /usr/lib/virtualbox/additions/VBoxGuestAdditions.iso .\npuppet $ wget https://raw.github.com/adamreid/kickstarts/master/puppet-es4-vagrant-ks.cfg\npuppet $ python -m 'http.server'\nServing HTTP on 0.0.0.0 port 8000 ...\n\n\n\nThe kickstart\nThis kickstart is an extension of the puppet-es4 with the addition of a few steps to ready it for vagrant and the disabling of a few services that I would consider unnecessary for the VM's intended purpose.\nMost changes here are to conform to the conventions outlined in the Vagrant base box documentation. Specifically:\n The root password is changed to vagrant.\n The vagrant user is added to the admin group.\n The admin group is given passwordless sudo access.\n The vagrant user's .ssh/authorized_keys file contains a known (insecure) key for pubkey authentication.\n* The VirtualBox guest additions are installed.\nA final step is then run to help keep the size of the exported vagrant box down. A file is created in /tmp and filled with 0's until the disk runs out of space, then is deleted. This step is optional. If you are doing repeated testing of the kickstart, this step should be commented out to save time.\n# Kickstart file for Puppet on CentOS 4/RedHat ES-4\n# Tested on ES-4 U8 / CentOS 4.8\n# May work on older enterprise 4 systems.\n#\n# Adam Reid\n# http://github.com/adamreid/kickstarts/puppet-es4-ks.cfg\n\ninstall\ncdrom\nlang en_US.UTF-8\nlangsupport --default=en_US.UTF-8 en_US.UTF-8\nkeyboard us\nxconfig --card \"VESA driver (generic)\" --videoram 12288 --hsync 31.5-37.9 --vsync 50-70 --resolution 800x600 --depth 16\nnetwork --device eth0 --bootproto dhcp\nrootpw vagrant\nfirewall --disabled\nselinux --disabled\nauthconfig --enableshadow --passalgo=md5\ntimezone --utc America/New_York\nbootloader --location=mbr\n# The following is the partition information you requested\n# Note that any partitions you deleted are not expressed\n# here so unless you clear all partitions first, this is\n# not guaranteed to work\nclearpart --all --drives=sda\npart /boot --fstype ext3 --size=100 --ondisk=sda\npart pv.2 --size=0 --grow --ondisk=sda\nvolgroup VolGroup00 --pesize=32768 pv.2\nlogvol swap --fstype swap --name=LogVol01 --vgname=VolGroup00 --size=512 --grow --maxsize=1024\nlogvol / --fstype ext3 --name=LogVol00 --vgname=VolGroup00 --size=1024 --grow\n\n%packages\nlvm2\nkernel\ne2fsprogs\ngrub\n\n# required to build ruby\n# should be kept for gems that build native extensions.\nautomake\ngcc\ncpp\nglibc-devel\nglibc-headers\nglibc-kernheaders\nglibc\nglibc-common\nlibgcc\n\n# required to build ruby bindings, can be removed after\nzlib-devel\nopenssl-devel\nreadline-devel\n\n%post\n\n# Change to a vt to see progress\n\nexec < /dev/tty3 > /dev/tty3\nchvt 3\n\n# redirect output to ks-post.log including stdout and stderr\n(\n    #######################################################\n    # Build Ruby\n    #######################################################\n\n    # Keep it clean\n    mkdir /tmp/ruby\n    cd /tmp/ruby\n\n    # autoconf 2.60 is required to build ruby\n    wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.60.tar.gz\n    tar -xzf autoconf-2.60.tar.gz\n    cd autoconf-2.60\n    ./configure --prefix=/usr && make && make install\n    cd /tmp/ruby\n\n    # build ruby-1.8.7-p358\n    wget http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p358.tar.bz2\n    tar -xjf ruby-1.8.7-p358.tar.bz2\n    cd ruby-1.8.7-p358\n    autoconf\n    ./configure --prefix=/usr && make && make install\n    cd /tmp/ruby\n\n    # install ruby-gems 1.8.10\n    wget http://production.cf.rubygems.org/rubygems/rubygems-1.8.10.tgz\n    tar -xzf rubygems-1.8.10.tgz\n    cd rubygems-1.8.10\n    /usr/bin/ruby setup.rb\n\n    # clean up\n    cd /\n    rm -rf /tmp/ruby\n\n    #######################################################\n    # Install Puppet\n    #######################################################\n    gem install puppet --no-rdoc --no-ri\n\n    # add the puppet group\n    groupadd puppet\n\n    #######################################################\n    # Install VirtualBox Guest Additions\n    #\n    # Note: You will need to provide a copy of the\n    # VirtualBoX Guest Addititons iso on a web server.\n    #######################################################\n    cd /tmp\n    wget http://192.168.1.3:8000/VBoxGuestAdditions.iso\n    mkdir /tmp/isomount\n    mount -t iso9660 -o loop /tmp/VBoxGuestAdditions.iso /tmp/isomount\n\n    /tmp/isomount/VBoxLinuxAdditions.run\n    umount isomount\n    rm VBoxGuestAdditions.iso\n\n    #######################################################\n    # Turn off un-needed services\n    #######################################################\n    chkconfig sendmail off\n    chkconfig vbox-add-x11 off\n    chkconfig smartd off\n    chkconfig ntpd off\n    chkconfig cupsd off\n\n    #######################################################\n    # Setup for Vagrant\n    #######################################################\n    groupadd admin\n    useradd -g admin vagrant\n    echo 'Defaults env_keep=\"SSH_AUTH_SOCK\"' >> /etc/sudoers\n    echo '%admin    ALL=NOPASSWD: ALL' >> /etc/sudoers\n\n    # Add vagrant insecure private key for key auth\n    # Make your own if this is private.\n    # See http://vagrantup.com/docs/base_boxes.html\n    mkdir /home/vagrant/.ssh\n    echo \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key\" > /home/vagrant/.ssh/authorized_keys\n\n    # Clean up unused disk space so compressed image is smaller.\n    cat /dev/zero > /tmp/zero.fill\n    rm /tmp/zero.fill\n\n    #######################################################\n    # The system can now be packaged with \n    # `vagrant package VMNAME`\n    #######################################################\n    echo 'You can now package this box with `vagrant package VMNAME`'\n\n) 2>&1 | /usr/bin/tee /root/ks-post.log\n\n# switch back to gui\nchvt 7\n\n\n\nCreating the Vagrant Image\nNow that the kickstart has been installed it is ready to be packaged as a vagrant base box.\nI named my base image vagrant-es4 in VirtualBox, so when following this example make sure to replace my VM name with yours.\npuppet $ vagrant package --base vagrant-es4\npuppet $ vagrant box add es4base package.box\n\n\n\nThe image is now ready for you to use in your own vagrant images. Create a new vagrant configuration to test the base image with.\npuppet $ cd ~/vms\nvms $ mkdir es4test\nvms $ cd es4test\nvms $ vagrant init es4base\nvms $ vagrant up\nvms $ vagrant ssh\n\n\n\nThe last command vagrant ssh gives you shell access to the virtual machine you just created. If you look in the machines /vagrant directory you will notice that your Vagrantfile is there. This is a VirtualBox \"shared folder\" that is provided for you by vagrant. The directory it's sharing is the same directory that vagrant init was run inside of in the steps above. \nWhen developing an application you can see how this little convenience will make a big difference in testing your application in a virtual environment. You just create a Vagrantfile with the configuration you require, spin up the VM, and run your application from the shared folder. Keeping the Vagrantfile in source with your application will remind you to keep it up to date as the applications requirements change, and makes it easy for new developers to quickly set up a known-good environment to test in.", 
      "tags": "puppet centos vagrant", 
      "loc": "/posts/Kickstarting-Vagrant-On-Centos4.html", 
      "title": "Kickstarting a CentOS / RedHat 4 Vagrant Image"
    }, 
    {
      "text": "This is a short post on how I got Puppet working on CentOS 4.8. Why would I want to do such a thing when there are pre-packaged RPMs available for Centos 5 or 6? Well the company I work for has a massive number of RedHat ES-4 U8 (RedHat ES-4 U8 ~ CentOS 4.8) systems deployed all over the world. I work as part of the \"Software Build and Configuration\" team and we are responsible for setting up systems for QA. Since we use ES-4U8 in production, we must use the same release in QA.\nOne of the goals I've set for myself in my job is to make these QA systems disposable. When QA test these systems they sometimes require specific configuration or data changes to make sure feature X is working and doesn't break feature Y. You can't very well dispose of a system that takes you 1 or 2 days to manually configure, and that's where puppet comes in.\nPuppet (and Chef) allow you to describe the packages, attributes, and configurations that make up a system. They will take a description that you write, called a manifest for puppet and a recipe for chef, and apply changes to a system to make it fit that description. The end result is a reproducible, and therefore disposable, system that can be used for testing a software change.\nUnfortunately on a legacy system such as RedHatES-4 the requirements to run puppet out of the box are not met. Fortunately there is not much that needs to be done to set puppet up, and it can easily be accomplished in a kickstart.\nThe set up\nIn order to run puppet on any system you need Ruby 1.8.5 or 1.8.7 and rubygems. I chose 1.8.7 for performance improvements, and it's compatibility with puppet and chef. In order to build ruby you will need to manually build autconf 2.60 as CentOS 4.8 ships with autoconf 2.59 which won't work. You will also need to make sure that the following packages are installed in your kickstart environment.\nautomake\ngcc\ncpp\nglibc-devel\nglibc-headers\nglibc-kernheaders\nglibc\nglibc-common\nlibgcc\nzlib-devel\nopenssl-devel\nreadline-devel\nThe kickstart\nThis kickstart can be used with CentOS 4 or RedHat 4. It will install a 'minimal system' and the packages required to build Ruby and rubygems. In the %post install section it will download and build autoconf, ruby-1.8.7 and rubygems-1.8.10 then use gem install puppet to install puppet.\n# Kickstart file for Puppet on CentOS 4/RedHat ES-4\n# Tested on ES-4 U8 / CentOS 4.8\n# May work on older enterprise 4 systems.\n#\n# May 5, 2012\n# Adam Reid\n\ninstall\ncdrom\nlang en_US.UTF-8\nlangsupport --default=en_US.UTF-8 en_US.UTF-8\nkeyboard us\nxconfig --card \"VESA driver (generic)\" --videoram 12288 --hsync 31.5-37.9 --vsync 50-70 \\\n    --resolution 800x600 --depth 16\nnetwork --device eth0 --bootproto dhcp\n# Password = password\nrootpw --iscrypted $1$7nqqHQSF$/32jwOnJCOiDivVV7o0iw/\nfirewall --disabled\nselinux --disabled\nauthconfig --enableshadow --passalgo=md5\ntimezone --utc America/New_York\nbootloader --location=mbr\n# The following is the partition information you requested\n# Note that any partitions you deleted are not expressed\n# here so unless you clear all partitions first, this is\n# not guaranteed to work\nclearpart --linux --drives=sda\npart /boot --fstype ext3 --size=100 --ondisk=sda\npart pv.2 --size=0 --grow --ondisk=sda\nvolgroup VolGroup00 --pesize=32768 pv.2\nlogvol swap --fstype swap --name=LogVol01 --vgname=VolGroup00 --size=512 --grow --maxsize=1024\nlogvol / --fstype ext3 --name=LogVol00 --vgname=VolGroup00 --size=1024 --grow\n\n%packages\nlvm2\nkernel\ne2fsprogs\ngrub\n\n# required to build ruby\n# should be kept for gems that build native extensions.\nautomake\ngcc\ncpp\nglibc-devel\nglibc-headers\nglibc-kernheaders\nglibc\nglibc-common\nlibgcc\n\n# required to build ruby bindings, can be removed after\nzlib-devel\nopenssl-devel\nreadline-devel\n\n%post --log=/root/ks-post.log\n# Change to a vt to see progress\nchvt 3\n\n# redirect output to ks-post.log including stdout and stderr\n(\n    # Keep it clean\n    mkdir /tmp/ruby\n    cd /tmp/ruby\n\n    # autoconf 2.60 is required to build ruby\n    wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.60.tar.gz\n    tar -xzf autoconf-2.60.tar.gz\n    cd autoconf-2.60\n    ./configure --prefix=/usr && make && make install\n    cd /tmp/ruby\n\n    # build ruby-1.8.7-p358\n    wget http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p358.tar.bz2\n    tar -xjf ruby-1.8.7-p358.tar.bz2\n    cd ruby-1.8.7-p358\n    autoconf\n    ./configure --prefix=/usr && make && make install\n    cd /tmp/ruby\n\n    # install ruby-gems 1.8.10\n    wget http://production.cf.rubygems.org/rubygems/rubygems-1.8.10.tgz\n    tar -xzf rubygems-1.8.10.tgz\n    cd rubygems-1.8.10\n    /usr/bin/ruby setup.rb\n\n    # clean up\n    cd /\n    rm -rf /tmp/ruby\n\n    # install puppet\n    gem install puppet\n) 2>&1 | tee > /root/ks-post.log\n\n# switch back to gui\nchvt 7\n\n\n\nAnd that's it. That's enough to get you a puppet client system on RedHat ES-4 U8 or CentoOS 4.8. In a later post I will review how to create a Vagrant image to test your puppet manifests with.", 
      "tags": "puppet centos", 
      "loc": "/posts/Kickstarting-Puppet-On-Centos4.html", 
      "title": "Kickstarting Puppet on CentOS 4 / ES-4"
    }
  ]
}